{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SignalsService - KuperStudio A signaling service that avoids the use of instances in your work, with the service you will be able to connect one or more scripts without having to use BindableEvents or RemoteEvents. The service is simple and easy to use, with just a few words we can all be together and connected. What are the benefits the library gives? Optimization, as it will no longer be necessary to use instances for basic events. A fast, clean and easy to use connection, thus bringing you a better and organized code. Events can be used either individually (Connect in a single script) or collectively (Connect in multiple scripts). Why should I use SignalsService? SignalsService serves to bring you a more comprehensive way of connecting without requiring instance-based events that take out of your optimization, this means that using it will help you a lot with connections in your specific codes or functions. How does the service work? The service works based on meta-tables that store the connections in ascending order, functions are available that allow manipulating this meta-table of connections. See the discussion about the service in our Devforum topic.","title":"Home"},{"location":"#signalsservice-kuperstudio","text":"A signaling service that avoids the use of instances in your work, with the service you will be able to connect one or more scripts without having to use BindableEvents or RemoteEvents. The service is simple and easy to use, with just a few words we can all be together and connected.","title":"SignalsService - KuperStudio"},{"location":"#what-are-the-benefits-the-library-gives","text":"Optimization, as it will no longer be necessary to use instances for basic events. A fast, clean and easy to use connection, thus bringing you a better and organized code. Events can be used either individually (Connect in a single script) or collectively (Connect in multiple scripts).","title":"What are the benefits the library gives?"},{"location":"#why-should-i-use-signalsservice","text":"SignalsService serves to bring you a more comprehensive way of connecting without requiring instance-based events that take out of your optimization, this means that using it will help you a lot with connections in your specific codes or functions.","title":"Why should I use SignalsService?"},{"location":"#how-does-the-service-work","text":"The service works based on meta-tables that store the connections in ascending order, functions are available that allow manipulating this meta-table of connections. See the discussion about the service in our Devforum topic.","title":"How does the service work?"},{"location":"api/","text":"API SignalsService SignalsService.new() local Signal = SignalsService . new ( 'Signal' ) It will return a signal/connection that will provide access to the signal's functions. Note Even though the name of the function is new , the function is also used to obtain signals that already exist. Warning To create or get a signal, you must pass the name you want to the signal or the service will fail. Signal Signal:Connect() Signal : Connect ( function ( A , B ) print ( A + B ) end ) It will connect to the signal and if there is any trigger from the signal it will load the function passed as argument. Signal:ConnectParallel() Signal : ConnectParallel ( function ( A , B ) print ( A + B ) end ) It works similarly to the 'Connect' function, but being a parallel connection, so you don't have to worry about loops, wait, or any other functions that interrupt code loading. Signal:Wait() Signal : Wait () This function will commonly be used in multiple scripts or parallel functions in an individual script as this function pauses the code until there is a fired on the signal. Signal:Fire() Signal : Fire ( 5 , 5 ) Fire the signal passing the necessary arguments of your connections.","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#signalsservice","text":"","title":"SignalsService"},{"location":"api/#signalsservicenew","text":"local Signal = SignalsService . new ( 'Signal' ) It will return a signal/connection that will provide access to the signal's functions. Note Even though the name of the function is new , the function is also used to obtain signals that already exist. Warning To create or get a signal, you must pass the name you want to the signal or the service will fail.","title":"SignalsService.new()"},{"location":"api/#signal","text":"","title":"Signal"},{"location":"api/#signalconnect","text":"Signal : Connect ( function ( A , B ) print ( A + B ) end ) It will connect to the signal and if there is any trigger from the signal it will load the function passed as argument.","title":"Signal:Connect()"},{"location":"api/#signalconnectparallel","text":"Signal : ConnectParallel ( function ( A , B ) print ( A + B ) end ) It works similarly to the 'Connect' function, but being a parallel connection, so you don't have to worry about loops, wait, or any other functions that interrupt code loading.","title":"Signal:ConnectParallel()"},{"location":"api/#signalwait","text":"Signal : Wait () This function will commonly be used in multiple scripts or parallel functions in an individual script as this function pauses the code until there is a fired on the signal.","title":"Signal:Wait()"},{"location":"api/#signalfire","text":"Signal : Fire ( 5 , 5 ) Fire the signal passing the necessary arguments of your connections.","title":"Signal:Fire()"},{"location":"documentation/basicusage/","text":"Basic Usage Using the service is the easy part, it's easier than walking forward, here we just need to be creating connections and using them however you want, whether in multiple scripts or individually. We will be visualizing 2 scripts that carry different functions but work together. Warning The services have a small issue at hand when using the same connection in multiple scripts, it is necessary to make the script that will fire the connection to wait until the script that will receive the connection fire loads its function completely or it may happen that script fires and not load any functions as the script failed to load your connection in time. Script - 1 --// Services local SignalsService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'SignalsService' )) --// Signals local Adder = SignalsService . new ( 'Adder' ) -- Creates a connection. local Parallel = SignalsService . new ( 'Parallel' ) --// Functions Adder : Connect ( function ( A , B ) -- It will connect with a connection and send a callback function for when the connection is fired. print ( A .. ' + ' .. B .. ' = ' .. A + B ) end ) Adder : Wait () -- It will wait until the 'Adder' connection is fired. Parallel : Fire () -- It will fire the 'Parallel' connection. Script - 2 --// Services local SignalsService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'SignalsService' )) --// Signals local Adder = SignalsService . new ( 'Adder' ) local Parallel = SignalsService . new ( 'Parallel' ) --// Functions Adder : ConnectParallel ( function ( A , B ) -- It will connect parallel to a connection and send a callback function for when the parallel connection is fired. Parallel : Wait () -- It will wait until the 'Parallel' connection is fired. print ( 'Parallel: ' .. A .. ' + ' .. B .. ' = ' .. A + B ) end ) task . wait ( 5 ) -- It will wait 5 seconds after the game starts to fire a connection. Adder : Fire ( 5 , 6 ) -- It will fire the 'Adder' connection. Notice It is noticed that one script acts by loading a connection calculating the arguments passed by the fires and the other script acts with parallel functions that also calculate the fires arguments but wait in parallel until the fire of the previous script is performed first. If the parallel connection for script-2 was not used, the code would not work as it would not be able to trigger and load the code at the same time.","title":"Basic Usage"},{"location":"documentation/basicusage/#basic-usage","text":"Using the service is the easy part, it's easier than walking forward, here we just need to be creating connections and using them however you want, whether in multiple scripts or individually. We will be visualizing 2 scripts that carry different functions but work together. Warning The services have a small issue at hand when using the same connection in multiple scripts, it is necessary to make the script that will fire the connection to wait until the script that will receive the connection fire loads its function completely or it may happen that script fires and not load any functions as the script failed to load your connection in time.","title":"Basic Usage"},{"location":"documentation/basicusage/#script-1","text":"--// Services local SignalsService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'SignalsService' )) --// Signals local Adder = SignalsService . new ( 'Adder' ) -- Creates a connection. local Parallel = SignalsService . new ( 'Parallel' ) --// Functions Adder : Connect ( function ( A , B ) -- It will connect with a connection and send a callback function for when the connection is fired. print ( A .. ' + ' .. B .. ' = ' .. A + B ) end ) Adder : Wait () -- It will wait until the 'Adder' connection is fired. Parallel : Fire () -- It will fire the 'Parallel' connection.","title":"Script - 1"},{"location":"documentation/basicusage/#script-2","text":"--// Services local SignalsService = require ( game : GetService ( 'ReplicatedStorage' ): FindFirstChild ( 'SignalsService' )) --// Signals local Adder = SignalsService . new ( 'Adder' ) local Parallel = SignalsService . new ( 'Parallel' ) --// Functions Adder : ConnectParallel ( function ( A , B ) -- It will connect parallel to a connection and send a callback function for when the parallel connection is fired. Parallel : Wait () -- It will wait until the 'Parallel' connection is fired. print ( 'Parallel: ' .. A .. ' + ' .. B .. ' = ' .. A + B ) end ) task . wait ( 5 ) -- It will wait 5 seconds after the game starts to fire a connection. Adder : Fire ( 5 , 6 ) -- It will fire the 'Adder' connection. Notice It is noticed that one script acts by loading a connection calculating the arguments passed by the fires and the other script acts with parallel functions that also calculate the fires arguments but wait in parallel until the fire of the previous script is performed first. If the parallel connection for script-2 was not used, the code would not work as it would not be able to trigger and load the code at the same time.","title":"Script - 2"},{"location":"documentation/settingup/","text":"Setting up SignalsService is a module, this means that to use the service you will need to request the module. For the required module we will have different options to do this. Requiring module 1 - Getting by service ID Create a module in ReplicatedStorage Insert a return with the require by service ID (7715453598) inside the module 2 - Get it from the Roblox Library Get the library model Put the model inside ReplicatedStorage 3 - Get from GitHub SignalsService Repository","title":"Setting up"},{"location":"documentation/settingup/#setting-up","text":"SignalsService is a module, this means that to use the service you will need to request the module. For the required module we will have different options to do this.","title":"Setting up"},{"location":"documentation/settingup/#requiring-module","text":"","title":"Requiring module"},{"location":"documentation/settingup/#1-getting-by-service-id","text":"Create a module in ReplicatedStorage Insert a return with the require by service ID (7715453598) inside the module","title":"1 - Getting by service ID"},{"location":"documentation/settingup/#2-get-it-from-the-roblox-library","text":"Get the library model Put the model inside ReplicatedStorage","title":"2 - Get it from the Roblox Library"},{"location":"documentation/settingup/#3-get-from-github","text":"SignalsService Repository","title":"3 - Get from GitHub"}]}